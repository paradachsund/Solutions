//______________merge_strings_lexicographically__________
func mergeStringsLexicographically(_ string1: String, _ string2: String) -> String {
    var rec1:[Character:Int] = [:]
    var rec2:[Character:Int] = [:]
    for ch in Array(string1) {
//        rec1[ch] =
    }
    for ch in Array(string2) {
//        rec2[ch]
    }
    var pt1 = 0
    var pt2 = 0
    var len1 = string1.count
    var len2 = string2.count
    let s1 = Array(string1)
    let s2 = Array(string2)
    var result:[Character] = []
    while pt1 < len1 && pt2 < len2 {
        if rec1[Character(extendedGraphemeClusterLiteral: s1[pt1])] ?? 1 < rec2[Character(extendedGraphemeClusterLiteral: s2[pt2])] ?? 1  {
            pt1 += 1
        } else if rec1[Character(extendedGraphemeClusterLiteral: s1[pt1])] ?? 1 > rec2[Character(extendedGraphemeClusterLiteral: s2[pt2])] ?? 1 {
            pt2 += 1
        } else {
            if s1[pt1] <= s2[pt2] {
                result.append(Character(extendedGraphemeClusterLiteral: s1[pt1]))
                pt1 += 1
            } else {
                result.append(Character(extendedGraphemeClusterLiteral: s2[pt2]))
                pt2 += 1
            }
        }
    }
    while pt1 < len1 {
        result.append(Character(extendedGraphemeClusterLiteral: s1[pt1]))
        pt1 += 1
    }
    while pt2 < len2 {
        result.append(Character(extendedGraphemeClusterLiteral: s2[pt2]))
        pt2 += 1
    }
    return String(result)
}

func occurrencesInString(_ string: String, character: Character) -> Int {
    var count = 1
    for i in Array(string) {
        if character == i {
            count += 1
        }
    }
    return count
}
